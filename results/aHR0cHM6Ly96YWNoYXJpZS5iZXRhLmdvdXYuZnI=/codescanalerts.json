{"totalCount":8,"grade":"D","repositories":[{"url":"https://github.com/betagouv/zacharie","grade":"D","alerts":[{"number":28,"created_at":"2025-09-16T07:22:33Z","updated_at":"2025-09-16T07:22:33Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/28","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/28","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Route handler for GET requests uses query parameter as sensitive data.\nRoute handler for GET requests uses query parameter as sensitive data."},"location":{"path":"api-express/src/controllers/admin.ts","start_line":781,"end_line":781,"start_column":22,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/28/instances","dismissal_approved_by":null},{"number":27,"created_at":"2025-09-16T07:22:33Z","updated_at":"2025-09-16T07:22:33Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/27","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/27","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Route handler for GET requests uses query parameter as sensitive data."},"location":{"path":"api-express/src/controllers/admin.ts","start_line":762,"end_line":762,"start_column":22,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/27/instances","dismissal_approved_by":null},{"number":26,"created_at":"2025-09-16T07:22:33Z","updated_at":"2025-09-16T07:22:33Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/26","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/26","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Route handler for GET requests uses query parameter as sensitive data."},"location":{"path":"api-express/src/controllers/admin.ts","start_line":727,"end_line":727,"start_column":22,"end_column":43},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/26/instances","dismissal_approved_by":null},{"number":25,"created_at":"2025-09-16T07:22:33Z","updated_at":"2025-09-16T07:22:33Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/25","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/25","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/tainted-format-string","severity":"warning","description":"Use of externally-controlled format string","name":"js/tainted-format-string","tags":["external/cwe/cwe-134","security"],"full_description":"Using external input in format strings can lead to garbled output.","help":"# Use of externally-controlled format string\nFunctions like the Node.js standard library function `util.format` accept a format string that is used to format the remaining arguments by providing inline format specifiers. If the format string contains unsanitized input from an untrusted source, then that string may contain unexpected format specifiers that cause garbled output.\n\n\n## Recommendation\nEither sanitize the input before including it in the format string, or use a `%s` specifier in the format string, and pass the untrusted data as corresponding argument.\n\n\n## Example\nThe following program snippet logs information about an unauthorized access attempt. The log message includes the user name, and the user's IP address is passed as an additional argument to `console.log` to be appended to the message:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by \" + user, ip);\n});\n\n```\nHowever, if a malicious user provides `%d` as their user name, `console.log` will instead attempt to format the `ip` argument as a number. Since IP addresses are not valid numbers, the result of this conversion is `NaN`. The resulting log message will read \"Unauthorized access attempt by NaN\", missing all the information that it was trying to log in the first place.\n\nInstead, the user name should be included using the `%s` specifier:\n\n\n```javascript\nconst app = require(\"express\")();\n\napp.get(\"unauthorized\", function handler(req, res) {\n  let user = req.query.user;\n  let ip = req.connection.remoteAddress;\n  console.log(\"Unauthorized access attempt by %s\", user, ip);\n});\n\n```\n\n## References\n* Node.js Documentation: [util.format](https://nodejs.org/api/util.html#util_util_format_format_args).\n* Common Weakness Enumeration: [CWE-134](https://cwe.mitre.org/data/definitions/134.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Format string depends on a user-provided value."},"location":{"path":"api-express/src/controllers/admin.ts","start_line":725,"end_line":725,"start_column":19,"end_column":27},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/25/instances","dismissal_approved_by":null},{"number":24,"created_at":"2025-07-16T17:07:47Z","updated_at":"2025-07-16T17:07:47Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/24","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/24","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"actions/missing-workflow-permissions","severity":"warning","description":"Workflow does not contain permissions","name":"actions/missing-workflow-permissions","tags":["actions","external/cwe/cwe-275","maintainability","security"],"full_description":"Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.","help":"## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:actions","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"},"location":{"path":".github/workflows/tests.yml","start_line":7,"end_line":74,"start_column":5,"end_column":32},"classifications":["test"]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/24/instances","dismissal_approved_by":null},{"number":21,"created_at":"2025-03-21T13:02:16Z","updated_at":"2025-03-21T13:02:16Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/21","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/21","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Route handler for GET requests uses query parameter as sensitive data.\nRoute handler for GET requests uses query parameter as sensitive data."},"location":{"path":"api-express/src/controllers/certificats.ts","start_line":49,"end_line":49,"start_column":28,"end_column":49},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/21/instances","dismissal_approved_by":null},{"number":20,"created_at":"2025-03-21T13:02:16Z","updated_at":"2025-03-21T13:02:16Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/20","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/20","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/sensitive-get-query","severity":"warning","description":"Sensitive data read from GET request","name":"js/sensitive-get-query","tags":["external/cwe/cwe-598","security"],"full_description":"Placing sensitive data in a GET request increases the risk of the data being exposed to an attacker.","help":"# Sensitive data read from GET request\nSensitive information such as user passwords should not be transmitted within the query string of the requested URL. Sensitive information within URLs may be logged in various locations, including the user's browser, the web server, and any forward or reverse proxy servers between the two endpoints. URLs may also be displayed on-screen, bookmarked or emailed around by users. They may be disclosed to third parties via the Referer header when any off-site links are followed. Placing sensitive information into the URL therefore increases the risk that it will be captured by an attacker.\n\n\n## Recommendation\nUse HTTP POST to send sensitive information as part of the request body; for example, as form data.\n\n\n## Example\nThe following example shows two route handlers that both receive a username and a password. The first receives this sensitive information from the query parameters of a GET request, which is transmitted in the URL. The second receives this sensitive information from the request body of a POST request.\n\n\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(require('body-parser').urlencoded({ extended: false }))\n\n// bad: sensitive information is read from query parameters\napp.get('/login1', (req, res) => {\n    const user = req.query.user;\n    const password = req.query.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n// good: sensitive information is read from post body\napp.post('/login2', (req, res) => {\n    const user = req.body.user;\n    const password = req.body.password;\n    if (checkUser(user, password)) {\n        res.send('Welcome');\n    } else {\n        res.send('Access denied');\n    }\n});\n\n```\n\n## References\n* CWE: [CWE-598: Use of GET Request Method with Sensitive Query Strings](https://cwe.mitre.org/data/definitions/598.html)\n* PortSwigger (Burp): [Password Submitted using GET Method](https://portswigger.net/kb/issues/00400300_password-submitted-using-get-method)\n* OWASP: [Information Exposure through Query Strings in URL](https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url)\n* Common Weakness Enumeration: [CWE-598](https://cwe.mitre.org/data/definitions/598.html).\n","security_severity_level":"medium"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"Route handler for GET requests uses query parameter as sensitive data.\nRoute handler for GET requests uses query parameter as sensitive data."},"location":{"path":"api-express/src/controllers/certificats.ts","start_line":91,"end_line":91,"start_column":13,"end_column":26},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/20/instances","dismissal_approved_by":null},{"number":14,"created_at":"2024-11-29T13:08:04Z","updated_at":"2024-11-29T13:08:06Z","url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/14","html_url":"https://github.com/betagouv/zacharie/security/code-scanning/14","assignees":[],"state":"open","fixed_at":null,"dismissed_by":null,"dismissed_at":null,"dismissed_reason":null,"dismissed_comment":null,"rule":{"id":"js/missing-rate-limiting","severity":"warning","description":"Missing rate limiting","name":"js/missing-rate-limiting","tags":["external/cwe/cwe-307","external/cwe/cwe-400","external/cwe/cwe-770","security"],"full_description":"An HTTP request handler that performs expensive operations without restricting the rate at which operations can be carried out is vulnerable to denial-of-service attacks.","help":"# Missing rate limiting\nHTTP request handlers should not perform expensive operations such as accessing the file system, executing an operating system command or interacting with a database without limiting the rate at which requests are accepted. Otherwise, the application becomes vulnerable to denial-of-service attacks where an attacker can cause the application to crash or become unresponsive by issuing a large number of requests at the same time.\n\n\n## Recommendation\nA rate-limiting middleware should be used to prevent such attacks.\n\n\n## Example\nThe following example shows an Express application that serves static files without rate limiting:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\nTo prevent denial-of-service attacks, the `express-rate-limit` package can be used:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\n// set up rate limiter: maximum of five requests per minute\nvar RateLimit = require('express-rate-limit');\nvar limiter = RateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // max 100 requests per windowMs\n});\n\n// apply rate limiter to all requests\napp.use(limiter);\n\napp.get('/:path', function(req, res) {\n  let path = req.params.path;\n  if (isValidPath(path))\n    res.sendFile(path);\n});\n\n```\n\n## References\n* OWASP: [Denial of Service Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html).\n* Wikipedia: [Denial-of-service attack](https://en.wikipedia.org/wiki/Denial-of-service_attack).\n* NPM: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit).\n* Common Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html).\n* Common Weakness Enumeration: [CWE-307](https://cwe.mitre.org/data/definitions/307.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n","security_severity_level":"high"},"tool":{"name":"CodeQL","guid":null,"version":"2.23.1"},"most_recent_instance":{"ref":"refs/heads/main","analysis_key":"dynamic/github-code-scanning/codeql:analyze","environment":"{\"build-mode\":\"none\",\"category\":\"/language:javascript-typescript\",\"language\":\"javascript-typescript\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}","category":"/language:javascript-typescript","state":"open","commit_sha":"80df39999b67c38bc21ca392dd2a4b36adc475f7","message":{"text":"This route handler performs a file system access, but is not rate-limited."},"location":{"path":"app-local-first-react-router/server-app.js","start_line":37,"end_line":39,"start_column":14,"end_column":2},"classifications":[]},"instances_url":"https://api.github.com/repos/betagouv/zacharie/code-scanning/alerts/14/instances","dismissal_approved_by":null}]}]}